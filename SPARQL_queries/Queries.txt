Query1: Ordering Planet Diameter

PREFIX ns1: <http://www.dei.unipd.it/database2/IMDbOntology/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
 
SELECT distinct?PlanetName ?Diameter
WHERE { 
    ?s a ns1:Planet ;
       ns1:name ?PlanetName ;
       ns1:diameter ?Diameter
} 
ORDER BY DESC (?Diameter)
LIMIT 50

-----------------------------------------------Query_2-------------------------------------

Query2: Characters who has either vehicle or starship

PREFIX ns1: <http://www.dei.unipd.it/database2/IMDbOntology/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?CharacterName 
       (GROUP_CONCAT(DISTINCT ?VehicleName; separator=', ') AS ?Vehicles)
       (GROUP_CONCAT(DISTINCT ?StarshipName; separator=', ') AS ?Starships)
WHERE {
   ?Character a ns1:Character ;
              ns1:name ?CharacterName .
   
   {
      ?Character ns1:hasVehicle ?Vehicle .
      ?Vehicle ns1:name ?VehicleName .
   }
   UNION
   {
      ?Character ns1:hasStarship ?Starship .
      ?Starship ns1:name ?StarshipName .
   }
}
GROUP BY ?CharacterName 

-----------------------------------------------Query_3-------------------------------------

Query3: Starships with the descending number of Passenger numbers and representing the crew number for each starship

PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX ns1: <http://www.dei.unipd.it/database2/IMDbOntology/>

SELECT ?StarshipName ?PassengersNumber ?CrewNumber
WHERE {
    
   ?Starship a ns1:Starship ;
              ns1:name ?StarshipName ;
              ns1:passengers ?PassengersNumber;
              ns1:crew ?CrewNumber
}
GROUP BY ?StarshipName ?PassengersNumber ?CrewNumber
ORDER BY DESC (?PassengersNumber) 

-----------------------------------------------Query_4-------------------------------------

Query4:Representing the character who which hair color has and shouwing how many characters has that color, imlied only to those characters who has one hair color.

PREFIX ns1: <http://www.dei.unipd.it/database2/IMDbOntology/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?HairColor (COUNT(?Character) AS ?CharacterCount) 
                  (GROUP_CONCAT(DISTINCT ?CharacterName; separator=', ') AS ?Characters)
WHERE {
   ?Character a ns1:Character ;
              ns1:name ?CharacterName ;
              ns1:hairColor ?HairColor .
   FILTER (?HairColor != 'none')
}
GROUP BY ?HairColor

-----------------------------------------------Query_5-------------------------------------

Query5: Showing each existing gender among characters and showing their amount and also the heaviest mass of the character in particular gender.

PREFIX ns1: <http://www.dei.unipd.it/database2/IMDbOntology/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?Gender
       (COUNT(?Character) AS ?CharacterCount)
       (MAX(?Mass) AS ?HeaviestCharacterMass)
WHERE {
   ?Character a ns1:Character ;
              ns1:gender ?Gender .
   OPTIONAL { ?Character ns1:mass ?Mass }
}
GROUP BY ?Gender

-----------------------------------------------Query_6-------------------------------------

Query6: Presenting some types of existing Terrain and how many planets have them and also the list of those planets given as well

PREFIX ns1: <http://www.dei.unipd.it/database2/IMDbOntology/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT
  ?Terrain
  (COUNT(DISTINCT ?Planet) AS ?PlanetCount)
  (GROUP_CONCAT(DISTINCT ?PlanetName; separator=', ') AS ?Planets)
WHERE {
   ?Planet a ns1:Planet ;
           ns1:terrain ?Terrain ;
           ns1:name ?PlanetName .
  
   BIND(CONTAINS(STR(?Terrain), "mountains") AS ?HasMountains)
   BIND(CONTAINS(STR(?Terrain), "forests") AS ?HasForests)
   BIND(CONTAINS(STR(?Terrain), "jungle") AS ?HasJungle)
   BIND(CONTAINS(STR(?Terrain), "lakes") AS ?HasLakes)
   BIND(CONTAINS(STR(?Terrain), "rivers") AS ?HasRivers)
  
   FILTER (?HasMountains || ?HasForests || ?HasJungle || ?HasLakes || ?HasRivers)
}
GROUP BY ?Terrain
ORDER BY DESC (?PlanetCount)

-----------------------------------------------Query_7-------------------------------------

Query7: Representing the classification type of Scpecies, counting the species with the same type, giving their list of species and the languages they are talking in.

PREFIX ns1: <http://www.dei.unipd.it/database2/IMDbOntology/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?Classification
       (GROUP_CONCAT(DISTINCT ?Language; separator=', ') AS ?Languages)
       (COUNT(DISTINCT ?Species) AS ?SpeciesCount)
       (GROUP_CONCAT(DISTINCT ?SpeciesName; separator=', ') AS ?SpeciesList)
WHERE {
   ?Species a ns1:Specie ;
            ns1:classification ?Classification ;
            ns1:language ?Language ;
            ns1:name ?SpeciesName .
}
GROUP BY ?Classification

-----------------------------------------------Query_8-------------------------------------
Query8: Presenting characters and sum of prices of vehicles and starships and grouping them by richest, poorest and in-between

PREFIX ns1: <http://www.dei.unipd.it/database2/IMDbOntology/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?characterName ?totalCost ?wealthStatus
WHERE {
    # Subquery to calculate total cost per character
    {
        SELECT ?character ?characterName (SUM(?cost) AS ?totalCost)
        WHERE {
            # Selecting characters and their starships/vehicles
            {
                ?character a ns1:Character ;
                           ns1:name ?characterName ;
                           ns1:hasStarship ?starship .
                ?starship a ns1:Starship ;
                          ns1:costInCredits ?cost .
            } UNION {
                ?character a ns1:Character ;
                           ns1:name ?characterName ;
                           ns1:hasVehicle ?vehicle .
                ?vehicle a ns1:Vehicle ;
                         ns1:costInCredits ?cost .
            }
        }
        GROUP BY ?character ?characterName
    }

    # Subquery to get max and min total costs
    {
        SELECT (MAX(?totalCost) AS ?maxCost) (MIN(?totalCost) AS ?minCost)
        WHERE {
            SELECT (SUM(?cost) AS ?totalCost)
            WHERE {
                {
                    ?character a ns1:Character ;
                               ns1:hasStarship ?starship .
                    ?starship a ns1:Starship ;
                              ns1:costInCredits ?cost .
                } UNION {
                    ?character a ns1:Character ;
                               ns1:hasVehicle ?vehicle .
                    ?vehicle a ns1:Vehicle ;
                             ns1:costInCredits ?cost .
                }
            }
            GROUP BY ?character
        }
    }

    # Binding wealth status
    BIND(IF(?totalCost = ?maxCost, "Richest",
        IF(?totalCost = ?minCost, "Poorest", "In-between")) AS ?wealthStatus)
}
ORDER BY DESC (?totalCost)

-----------------------------------------------Query_9-------------------------------------

Query9: Presents planet population and calculated density

PREFIX ns1: <http://www.dei.unipd.it/database2/IMDbOntology/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?planetName ?population  (IF(?diameter > 0, ?population / (4 * 3.14159 * ((?diameter / 2) * (?diameter / 2))), "N/A") AS ?density)
WHERE {
    
    ?planet a ns1:Planet ;
            ns1:name ?planetName ;
            ns1:population ?population ;
            ns1:diameter ?diameter .
    
}
ORDER BY DESC(?density)
OFFSET 4

-----------------------------------------------Query_10-------------------------------------

Query10: Gives the answer on particular character is related to the particular specie or not.

PREFIX ns1: <http://www.dei.unipd.it/database2/IMDbOntology/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
ASK WHERE 
{
  ?character a ns1:Character ;
             ns1:name "Chewbacca"^^xsd:string ;
             ns1:type ?species .
  ?species	 rdfs:label ?SpecieName

  FILTER (?SpecieName = "Wookiee")
}